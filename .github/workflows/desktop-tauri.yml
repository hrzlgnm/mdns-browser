name: "Reusable desktop tauri build workflow"

on:
  workflow_call:
    inputs:
      tagName:
        required: false
        type: string
      releaseBody:
        required: false
        type: string
      releaseName:
        required: false
        type: string
    secrets:
      TAURI_PRIVATE_KEY:
        required: true
      TAURI_KEY_PASSWORD:
        required: true
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
            symbol: üçè
          - os: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
            symbol: üçé
          - os: "ubuntu-latest"
            symbol: üêß
            install: |
              sudo apt-get update
              sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf python3-pip
              sudo python3 -m pip install codespell
          - os: "windows-latest"
            symbol: ü™ü
            install: |
              echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
              vcpkg install openssl:x64-windows-static-md

    name: ${{matrix.symbol}}
    runs-on: ${{ matrix.os }}
    steps:
      - name: üîÑ Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4

      - name: ü¶Ä Install rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: ${{ matrix.os == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin,wasm32-unknown-unknown' || 'wasm32-unknown-unknown' }}

      - name: üì¶ Rust Cache
        uses: Swatinem/rust-cache@82a92a6e8fbeee089604da2575dc567ae9ddeaab # v2.7.5
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}
          workspaces: |
            .
            src-tauri

      - name: üåç Export GitHub Actions cache environment variables windows
        if: contains(matrix.os, 'windows')
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: üõ†Ô∏è Setup | Install dependencies
        if: matrix.install != ''
        run: ${{ matrix.install }}
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

      - name: üì• Cached install cargo-make (ubuntu only)
        if: contains(matrix.os, 'ubuntu')
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: cargo-make@0.37.23
          locked: true

      - name: üìù Run codespell (ubuntu only)
        if: contains(matrix.os, 'ubuntu')
        run: |
          cargo make codespell

      - name: üì• Cached install leptosfmt (macos only)
        if: contains(matrix.os, 'macos')
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: leptosfmt@0.1.32
          locked: true

      - name: üìê Run leptosfmt and fail if any warnings (macos only)
        if: contains(matrix.os, 'macos')
        run: |
          leptosfmt --check src

      - name: üìê Run rustfmt and fail if any warnings (macos only)
        if: contains(matrix.os, 'macos')
        run: |
          cargo fmt -- --check
          cd src-tauri
          cargo fmt -- --check

      - name: üìé Run clippy and fail if any warnings (macos only)
        if: contains(matrix.os, 'macos')
        run: |
          cargo clippy -- -D warnings
          cd src-tauri
          cargo clippy -- -D warnings

      - name: ‚úÖ Run tests
        run: |
          cargo test

      - name: üì• Cached install trunk
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: trunk@0.21.1
          locked: true

      - name: üì• Cached install cargo-auditable
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: cargo-auditable@0.6.4
          locked: true

      - name: üì• Cached install tauri-cli
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: tauri-cli@2.0.4
          locked: true

      - name: üî® Build using tauri action (publish artifacts on release)
        uses: tauri-apps/tauri-action@8c3e0753aa015d00d03631d6d4f64ad59489251d # v0.5.15
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ inputs.tagName }}
          releaseBody: ${{ inputs.releaseBody }}
          releaseName: ${{ inputs.releaseName }}
          releaseDraft: false
          prerelease: false
          tauriScript: cargo --locked auditable tauri
          args: ${{ matrix.args }}

      - name: üì§ Upload build artifacts (push or pr builds only)
        if: (inputs.tagName == '')
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: "bundles-${{matrix.os}}${{matrix.args}}"
          path: |
            target/**/release/bundle
            target/**/release/mdns-browser*

      - name: üõ°Ô∏è Attest build provenance (publish release only)
        if: (inputs.tagName != '')
        uses: actions/attest-build-provenance@1c608d11d69870c2092266b3f9a6f3abbf17002c # v1.4.3
        with:
          subject-path: |
            target/release/bundle/nsis/*
            target/**/release/bundle/macos/*.tar.gz*
            target/**/release/bundle/dmg/*.dmg
            target/release/bundle/deb/*.deb
            target/release/bundle/rpm/*.rpm
            target/**/release/mdns-browser
            target/release/mdns-browser.exe

      - name: üìú Create SBOM
        uses: anchore/sbom-action@1ca97d9028b51809cf6d3c934c3e160716e1b605 # v0
        with:
          format: "spdx-json"
          output-file: "sbom.spdx.json"
          artifact-name: "${{ matrix.os }}${{ matrix.args }}.sbom.spdx.json"

      - name: üõ°Ô∏è Attest SBOM
        if: inputs.tagName != ''
        uses: actions/attest-sbom@5026d3663739160db546203eeaffa6aa1c51a4d6 # v1
        with:
          subject-path: ${{
            contains(matrix.os, 'ubuntu') && 'target/release/mdns-browser' ||
            contains(matrix.os, 'windows') && 'target/release/mdns-browser.exe' ||
            (contains(matrix.os, 'macos') && contains(matrix.args, 'x86_64')) && 'target/x86_64-apple-darwin/release/mdns-browser' ||
            (contains(matrix.os, 'macos') && contains(matrix.args, 'aarch64')) && 'target/aarch64-apple-darwin/release/mdns-browser'
            }}
          sbom-path: "sbom.spdx.json"
