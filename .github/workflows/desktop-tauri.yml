name: "Reusable desktop tauri build workflow"

on:
  workflow_call:
    inputs:
      tagName:
        required: false
        type: string
      releaseName:
        required: false
        type: string
    secrets:
      TAURI_PRIVATE_KEY:
        required: true
      TAURI_KEY_PASSWORD:
        required: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: "macos-latest"
            args: "--target universal-apple-darwin"
            symbol: üçè
            platform: macOS
          - os: "ubuntu-22.04"
            symbol: üêß
            install: |
              sudo apt-get update
              sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
            platform: Linux
          - os: "windows-latest"
            symbol: ü™ü
            install: |
              choco install wget -y
            platform: Windows

    name: ${{matrix.symbol}}
    runs-on: ${{ matrix.os }}
    steps:
      - name: üîÑ Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: üõ°Ô∏è Verify tag matches version in tauri config (publish only)
        if: inputs.tagName != ''
        shell: bash
        run: |
          CURRENT_VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)
          TAG=${GITHUB_REF#refs/tags/}
          if [[ "$TAG" != *"$CURRENT_VERSION" ]]
          then
            echo "The tag name ${TAG} does not match the version ${CURRENT_VERSION} from tauri config"
            exit 1
          fi

      - name: ü¶Ä Install rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: ${{ matrix.os == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin,wasm32-unknown-unknown' || 'wasm32-unknown-unknown' }}

      - name: üì¶ Rust cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}
          workspaces: |
            shared_constants -> ./target
            models -> ./target
            src-tauri -> ./target

      - name: üõ†Ô∏è Setup | Install dependencies
        if: matrix.install != ''
        run: ${{ matrix.install }}

      - name: üìù Check spelling using typos-action
        uses: crate-ci/typos@85f62a8a84f939ae994ab3763f01a0296d61a7ee # v1.36.2

      - name: üì• Cached install trunk
        uses: baptiste0928/cargo-install@b687c656bda5733207e629b50a22bf68974a0305 # v3
        with:
          crate: trunk
          version: 0.21.14
          locked: true
          args: --no-default-features
          features: rustls

      - name: üì• Cached install cargo-auditable
        uses: baptiste0928/cargo-install@b687c656bda5733207e629b50a22bf68974a0305 # v3
        with:
          crate: cargo-auditable
          version: 0.7.0
          locked: true

      - name: üì• Cached install tauri-cli
        uses: baptiste0928/cargo-install@b687c656bda5733207e629b50a22bf68974a0305 # v3
        with:
          crate: tauri-cli
          version: 2.8.4
          locked: true

      - name: üì• Cached install leptosfmt (ubuntu only)
        if: contains(matrix.os, 'ubuntu')
        uses: baptiste0928/cargo-install@b687c656bda5733207e629b50a22bf68974a0305 # v3
        with:
          crate: leptosfmt
          version: 0.1.33
          locked: true

      - name: üìê Run leptosfmt and fail if any warnings (ubuntu only)
        if: contains(matrix.os, 'ubuntu')
        run: |
          leptosfmt --check src

      - name: üìê Run rustfmt and fail if any warnings (ubuntu only)
        if: contains(matrix.os, 'ubuntu')
        run: |
          cargo fmt -- --check
          cd src-tauri
          cargo fmt -- --check

      - name: üì¶ Run sccache (not windows)
        if: "inputs.tagName == '' && !contains(matrix.os, 'windows')"
        uses: mozilla-actions/sccache-action@7d986dd989559c6ecdb630a3fd2557667be217ad # v0.0.9

      - name: üì¶ Set Rust caching env vars only on non-release runs (not windows)
        if: "inputs.tagName == '' && !contains(matrix.os, 'windows')"
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: üìé Run clippy and fail if any warnings (ubuntu only)
        if: contains(matrix.os, 'ubuntu')
        run: |
          cargo clippy -- -D warnings
          cd src-tauri
          cargo clippy -- -D warnings

      - name: ‚úÖ Run tests
        run: |
          cargo --locked test --package=models --package=mdns-browser

      - name: üîë Import windows signing certificate
        if: contains(matrix.os, 'windows')
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
          certutil -decode certificate/tempCert.txt certificate/certificate.pfx
          Remove-Item -path certificate -include tempCert.txt
          Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)

      - name: üî® Build using tauri action (publish artifacts on release)
        uses: tauri-apps/tauri-action@e834788a94591d81e3ae0bd9ec06366f5afb8994 # v0.5.23
        env:
          RUSTFLAGS: "-D warnings"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ inputs.tagName }}
          releaseName: ${{ inputs.releaseName }}
          releaseDraft: false
          prerelease: false
          tauriScript: cargo --locked auditable tauri
          args: ${{ matrix.args }}
          retryAttempts: 1

      - name: üì§ Upload build artifacts (push or pr builds only)
        if: inputs.tagName == ''
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "bundles-${{matrix.os}}${{matrix.args}}"
          path: |
            target/**/release/bundle
            target/**/release/mdns-browser*

      - name: üì§ Upload debug symbols (windows only)
        if: contains(matrix.os, 'windows')
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "debug-symbols-${{matrix.os}}${{matrix.args}}"
          path: |
            target/release/mdns_browser.pdb

      - name: üì§ Publish debug symbols to release (windows only)
        if: contains(matrix.os, 'windows') && (inputs.tagName != '')
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2
        with:
          files: target/release/mdns_browser.pdb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üõ°Ô∏è Attest build provenance (publish release only)
        if: inputs.tagName != ''
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-path: |
            target/release/bundle/nsis/*
            target/**/release/bundle/macos/*.tar.gz*
            target/**/release/bundle/dmg/*.dmg
            target/release/bundle/deb/*.deb
            target/release/bundle/rpm/*.rpm
            target/**/release/mdns-browser
            target/release/mdns-browser.exe
            target/release/mdns_browser.pdb

      - name: üìú Create SBOM
        uses: anchore/sbom-action@da167eac915b4e86f08b264dbdbc867b61be6f0c # v0
        with:
          format: "spdx-json"
          output-file: "sbom.spdx.json"
          artifact-name: "sbom.${{ matrix.platform }}.spdx.json"

      - name: üõ°Ô∏è Attest SBOM
        if: inputs.tagName != ''
        uses: actions/attest-sbom@4651f806c01d8637787e274ac3bdf724ef169f34 # v3
        with:
          subject-path: ${{
            contains(matrix.os, 'ubuntu') && 'target/release/mdns-browser' ||
            contains(matrix.os, 'windows') && 'target/release/mdns-browser.exe' ||
            contains(matrix.os, 'macos') && 'target/universal-apple-darwin/release/mdns-browser'
            }}
          sbom-path: "sbom.spdx.json"
